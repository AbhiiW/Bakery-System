#include <iostream>
#include <string>
#include <vector>
#include <cstdlib>
#include <fstream>
#include <iomanip>
#include <sstream>
using namespace std;

// Clear screen function
void clearScreen() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

// Admin login password
bool login() {
    string username, password;
    cout << "Enter username: ";
    cin >> username;
    cout << "Enter password: ";
    cin >> password;

    if (username == "admin" && password == "admin") {
        return true;
    }

    return false;
}

// Cashier login
bool userlogin() {
    string usernameu, passwordu;
    cout << "Enter username: ";
    cin >> usernameu;
    cout << "Enter password: ";
    cin >> passwordu;

    if (usernameu == "user" && passwordu == "user") {
        return true;
    }

    return false;
}

void showAdminmenu() {
    int adchoice;

    do {
        cout << "---- Admin Menu -----" << endl;
        cout << "01.Manage items and packages " << endl;
        cout << "02.View Items " << endl;
        cout << "03.Logout" << endl;
        cin >> adchoice;
        clearScreen();

        switch (adchoice) {
        case 1: {
            int mmgchoice;

            do {//01.Manage items and packages menu
                cout << "----- Manage Menu -----" << endl;
                cout << "01.Manage items " << endl;
                cout << "02.Manage Packages" << endl;
                cout << "03.Admin Menu" << endl;

                cin >> mmgchoice;
                clearScreen();

                switch (mmgchoice) {
                case 1: {// Manage items menu
                    int mngchoice;

                    do {
                        cout << "----- Manage items -----" << endl;
                        cout << "01.Add new item " << endl;
                        cout << "02.Show Items" << endl;
                        cout << "03.Delete an item" << endl;
                        cout << "04.Return to previous menu " << endl;
                        cin >> mngchoice;
                        clearScreen();

                        switch (mngchoice) {
                        case 1: {// Add new item
                            int itemcode;
                            double itemprice;
                            string itemname;

                            cout << "----- Adding new item -----" << endl;
                            cout << "Enter item code :" << endl;
                            cin >> itemcode;
                            cout << "Enter item name :" << endl;
                            cin.ignore();
                            getline(cin, itemname);
                            cout << "Enter item price :" << endl;
                            cin >> itemprice;

                            ofstream outfile("bakery_items.txt", ios::app);
                            if (outfile.is_open()) {
                                outfile << itemcode << "," << itemname << "," << itemprice << endl;
                                outfile.close();
                                cout << "Item added successfully." << endl;
                            }
                            else {
                                cout << "Error opening the file for writing." << endl;
                            }
                            break;
                        }
                        case 2: {// Show Items 
                            cout << "----- Show Items -----" << endl;
                            clearScreen();
                            ifstream inFile("bakery_items.txt");
                            if (inFile.is_open()) {
                                string line;
                                while (getline(inFile, line)) {
                                    stringstream ss(line);
                                    string itemcode_str, itemname, itemprice_str;

                                    if (getline(ss, itemcode_str, ',') &&
                                        getline(ss, itemname, ',') &&
                                        getline(ss, itemprice_str)) {
                                        int itemcode = stoi(itemcode_str);
                                        double itemprice = stod(itemprice_str);

                                        cout << "Item Code: " << itemcode << endl;
                                        cout << "Item Name: " << itemname << endl;
                                        cout << "Item Price: $" << fixed << setprecision(2) << itemprice << endl;
                                        cout << "-----------------------" << endl;
                                    }
                                }
                                inFile.close();
                            }
                            else {
                                cout << "Error opening the file." << endl;
                            }
                            break;
                        }
                        case 3: {// Delete an item
                            cout << "----- Delete an item -----" << endl;
                            string itemcode;
                            cout << "Enter the item code to delete: ";
                            cin >> itemcode;

                            // Open the input file and create a temporary file
                            ifstream inputFile("bakery_items.txt");
                            ofstream tempFile("temp.txt");

                            if (!inputFile || !tempFile) {
                                cout << "Error opening files!" << endl;
                                return;
                            }

                            string line;
                            bool deleted = false;

                            while (getline(inputFile, line)) {
                                size_t found = line.find(itemcode);
                                if (found != string::npos) {
                                    deleted = true;
                                    continue;
                                }
                                tempFile << line << endl;
                            }

                            inputFile.close();
                            tempFile.close();

                            if (deleted) {
                                remove("bakery_items.txt");

                                if (rename("temp.txt", "bakery_items.txt") != 0) {
                                    cerr << "Error renaming file!" << endl;
                                    return;
                                }

                                cout << "Item with item code " << itemcode << " Deleted successfully." << endl;
                            }
                            else {
                                remove("temp.txt");
                                cout << "Item with item code " << itemcode << " Not found." << endl;
                            }
                            break;
                        }
                        
                        case 4: 
                            break;
                        }
                    } while (mngchoice != 4);
                    break;
                }

                case 2: {// Package Menu
                    int pkgchoice;

                    do {
                        clearScreen();
                        cout << "----- Manage Packages -----" << endl;
                        cout << "01.Add new package " << endl;
                        cout << "02.View Packages" << endl;
                        cout << "03.Delete a package" << endl;
                        cout << "04.Return to main menu " << endl;
                        cin >> pkgchoice;
                        clearScreen();

                        switch (pkgchoice) {
                        case 1: {// Add new package
                            int pkgcode;
                            double pkgprice;
                            string pkgname;

                            cout << "----- Adding new Package -----" << endl;
                            cout << "Enter package code :" << endl;
                            cin >> pkgcode;
                            cout << "Enter package name :" << endl;
                            cin.ignore();
                            getline(cin, pkgname);
                            cout << "Enter package price :" << endl;
                            cin >> pkgprice;

                            ofstream outfile("bakery_packages.txt", ios::app);
                            if (outfile.is_open()) {
                                outfile << pkgcode << "," << pkgname << "," << pkgprice << endl;
                                outfile.close();
                                cout << "Package added successfully." << endl;
                            }
                            else {
                                cout << "Error opening the file for writing." << endl;
                            }
                            break;
                        }

                        case 2: {// Show Packages
                            cout << "----- Show Packages -----" << endl;

                            ifstream inFile("bakery_packages.txt");
                            if (inFile.is_open()) {
                                string line;
                                while (getline(inFile, line)) {
                                    stringstream ss(line);
                                    string pkgcode_str, pkgname, pkgprice_str;

                                    if (getline(ss, pkgcode_str, ',') &&
                                        getline(ss, pkgname, ',') &&
                                        getline(ss, pkgprice_str)) {
                                        int pkgcode = stoi(pkgcode_str);
                                        double pkgprice = stod(pkgprice_str);

                                        cout << "Package Code: " << pkgcode << endl;
                                        cout << "Package Name: " << pkgname << endl;
                                        cout << "Package Price: $" << fixed << setprecision(2) << pkgprice << endl;
                                        cout << "-----------------------" << endl;
                                    }
                                }
                                inFile.close();
                            }
                            else {
                                cout << "Error opening the file for reading." << endl;
                            }
                            break;
                        }                                              
                        case 3: {// Delete Packages
                            cout << "----- Delete a Package -----" << endl;
                            string pkgcode;
                            cout << "Enter the Package code to delete: ";
                            cin >> pkgcode;

                            // Open the input file and create a temporary file
                            ifstream inputFile("bakery_packages.txt");
                            ofstream tempFile("temp.txt");

                            if (!inputFile || !tempFile) {
                                cout << "Error opening files!" << endl;
                                return;
                            }

                            string line;
                            bool deleted = false;

                            while (getline(inputFile, line)) {
                                size_t found = line.find(pkgcode);
                                if (found != string::npos) {
                                    deleted = true;
                                    continue;
                                }
                                tempFile << line << endl;
                            }

                            inputFile.close();
                            tempFile.close();

                            if (deleted) {
                                remove("bakery_packages.txt");

                                if (rename("temp.txt", "bakery_packages.txt") != 0) {
                                    cerr << "Error renaming file!" << endl;
                                    return;
                                }

                                cout << "Package with package code " << pkgcode << " Deleted successfully." << endl;
                            }
                            else {
                                remove("temp.txt");
                                cout << "Package with package code " << pkgcode << " Not found." << endl;
                            }
                            break;
                        }


                        case 4: // Return to main menu
                            break;
                        
                        }
                    } while (pkgchoice != 4);
                    break;
                }
                case 3: // MAIN MENU
                    break;
                }
            } while (mmgchoice != 3);
            break;
        }

        case 2: // Show items

        {
            cout << "------------ Items -----------" << endl;

            ifstream inFile("bakery_items.txt");
            if (inFile.is_open()) {
                string line;
                while (getline(inFile, line)) {
                    stringstream ss(line);
                    string itemcode_str, itemname, itemprice_str;

                    if (getline(ss, itemcode_str, ',') &&
                        getline(ss, itemname, ',') &&
                        getline(ss, itemprice_str)) {
                        int itemcode = stoi(itemcode_str);
                        double itemprice = stod(itemprice_str);

                        cout << "Item Code: " << itemcode << endl;
                        cout << "Item Name: " << itemname << endl;
                        cout << "Item Price: $" << fixed << setprecision(2) << itemprice << endl;
                        cout << "-----------------------" << endl;
                    }
                }
                inFile.close();
            }
            else {
                cout << "Error opening the file." << endl;
            }


            {
                cout << "----- Packages -----" << endl;

                ifstream inFile("bakery_packages.txt");
                if (inFile.is_open()) {
                    string line;
                    while (getline(inFile, line)) {
                        stringstream ss(line);
                        string pkgcode_str, pkgname, pkgprice_str;

                        if (getline(ss, pkgcode_str, ',') &&
                            getline(ss, pkgname, ',') &&
                            getline(ss, pkgprice_str)) {
                            int pkgcode = stoi(pkgcode_str);
                            double pkgprice = stod(pkgprice_str);

                            cout << "Package Code: " << pkgcode << endl;
                            cout << "Package Name: " << pkgname << endl;
                            cout << "Package Price: $" << fixed << setprecision(2) << pkgprice << endl;
                            cout << "-----------------------" << endl;
                        }
                    }
                    inFile.close();
                }
                else {
                    cout << "Error opening the file for reading." << endl;
                }
                break;
            }

        }

            break;
        case 3: // Logout
            break;
        }
    } while (adchoice != 3);
}

void showCashiermenu() {
   
        int cachoice;
        cout << "---- Cashier Menu -----" << endl;
        cout << "01.View items and Packages" << endl;
        cout << "02.Create bill " << endl;
        cout << "03.View Company Information " << endl;
        cout << "04.Logout" << endl;
        cin >> cachoice;


    
            switch (cachoice) {
             
            case 1: // View items and packages 

            {
                cout << "------------ Items -----------" << endl;

                ifstream inFile("bakery_items.txt");
                if (inFile.is_open()) {
                    string line;
                    while (getline(inFile, line)) {
                        stringstream ss(line);
                        string itemcode_str, itemname, itemprice_str;

                        if (getline(ss, itemcode_str, ',') &&
                            getline(ss, itemname, ',') &&
                            getline(ss, itemprice_str)) {
                            int itemcode = stoi(itemcode_str);
                            double itemprice = stod(itemprice_str);

                            cout << "Item Code: " << itemcode << endl;
                            cout << "Item Name: " << itemname << endl;
                            cout << "Item Price: $" << fixed << setprecision(2) << itemprice << endl;
                            cout << "-----------------------" << endl;
                        }
                    }
                    inFile.close();
                }
                else {
                    cout << "Error opening the file." << endl;
                }


                {
                    cout << "----- Packages -----" << endl;

                    ifstream inFile("bakery_packages.txt");
                    if (inFile.is_open()) {
                        string line;
                        while (getline(inFile, line)) {
                            stringstream ss(line);
                            string pkgcode_str, pkgname, pkgprice_str;

                            if (getline(ss, pkgcode_str, ',') &&
                                getline(ss, pkgname, ',') &&
                                getline(ss, pkgprice_str)) {
                                int pkgcode = stoi(pkgcode_str);
                                double pkgprice = stod(pkgprice_str);

                                cout << "Package Code: " << pkgcode << endl;
                                cout << "Package Name: " << pkgname << endl;
                                cout << "Package Price: $" << fixed << setprecision(2) << pkgprice << endl;
                                cout << "-----------------------" << endl;
                            }
                        }
                        inFile.close();
                    }
                    else {
                        cout << "Error opening the file for reading." << endl;
                    }
                    break;
                }
                
            }
            
            break;

              
            case 2: // Create bill

                break;

            case 3: // View Company Information
                cout << "-------------------------------------------------" << endl;
                cout << "--------------- Amber Bakers --------------------" << endl;
                cout << "-------------------------------------------------" << endl;
                cout << "Amber bakery UK" << endl<< endl;
                cout << "Contact 01277 354396" << endl;
                cout << "Brownbread"<<endl<<"  Unit 11c, Dunsteads farm, Trueloves Lane,"<<endl<<"Ingatestone"<<endl<<"United Kingdom" << endl; 

                 break;

            case 4: // 
                return;
                break;
            default:
                cout << "Invalid choice. Please select a valid option." << endl;
                break;

            }
       

    
    }

          
int main() {
    bool loggedIn = false;

    int option;
    cout << "------ Amber Bakery -------" << endl;
    cout << "01.Admin Login" << endl << "02.Cashier Login" << endl << "03.Exit" << endl;
    cin >> option;
    clearScreen();

    while (option != 3) {
        switch (option) {
        case 1:
            loggedIn = login(); // Admin login call
            if (!loggedIn) {
                cout << "Login failed. Exiting..." << endl;
                return 0;
            }
            else {
                showAdminmenu();
            }
            break;

        case 2:
            loggedIn = userlogin(); // Cashier login calling
            if (!loggedIn) {
                cout << "Login failed. Exiting..." << endl;
                return 0;
            }
            else {
                showCashiermenu();
                break;
            }

        case 3:
            cout << "------ Amber Bakery -------" << endl;
            cout << "01.Admin Menu" << endl << "02.Cashier Menu" << endl << "03.Exit" << endl;
            cin >> option;
            clearScreen();
            break;

        default:
            cout << "Invalid choice. Please select a valid option." << endl;
        }
    }

    return 0;
}
